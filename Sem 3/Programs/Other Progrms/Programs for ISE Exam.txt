Array of objects to make a switch case and do functions, insert, delete, display. Display in a descending order. (Question from 2022)


import java.util.*;

class Student {
    int stud_id;
    String name;
    double avg_marks;

    public Student(int stud_id, String name, double avg_marks) 
    {
        this.stud_id = stud_id;
        this.name = name;
        this.avg_marks = avg_marks;
    }
}

public class StudentManagementSystem 
{
    public static void main(String args[]) 
    {
        Scanner sc = new Scanner(System.in);
        Student[] students = new Student[10]; // Assuming a maximum of 10 students
        int studentCount = 0;

        while (true) {
            System.out.println("Enter a choice");
            System.out.println("1. Add Student (Descending Order of Average Marks)");
            System.out.println("2. Delete Student by Student ID");
            System.out.println("3. Display Students (Descending Order of Average Marks)");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");

            int choice = sc.nextInt();

            switch (choice) {
                case 1:
                    if (studentCount < students.length) 
                    {
                        System.out.print("Enter Student ID: ");
                        int stud_id = sc.nextInt();
                        sc.nextLine(); // Consume newline
                        System.out.print("Enter Student Name: ");
                        String name = sc.nextLine();
                        System.out.print("Enter Average Marks: ");
                        double avg_marks = sc.nextDouble();

                        Student newStudent = new Student(stud_id, name, avg_marks);
                        int insertIndex = 0;
                        boolean inserted = false;

                        // Find the correct index to insert the student in descending order of average marks
                        for (int i = 0; i < studentCount; i++) 
                        {
                            if (avg_marks > students[i].avg_marks) 
                            {
                                insertIndex = i;
                                inserted = true;
                                break;
                            }
                            insertIndex = i + 1;
                        }

                        // Shift existing students to make space for the new student
                        for (int i = studentCount; i > insertIndex; i--) 
                        {
                            students[i] = students[i - 1];
                        }

                        students[insertIndex] = newStudent;
                        studentCount++;
                        
                        if (inserted) 
                        {
                            System.out.println("Student added successfully.");
                        } 
                        else 
                        {
                            System.out.println("Student added at the end.");
                        }
                    } else {
                        System.out.println("Maximum student limit reached.");
                    }
                    break;

                case 2:
                    System.out.print("Enter Student ID to delete: ");
                    int idToDelete = sc.nextInt();
                    boolean studentFound = false;

                    for (int i = 0; i < studentCount; i++) 
                    {
                        if (students[i].stud_id == idToDelete) 
                        {
                            // Shift remaining students to fill the gap
                            for (int j = i; j < studentCount - 1; j++) 
                            {
                                students[j] = students[j + 1];
                            }
                            studentCount--;
                            studentFound = true;
                            System.out.println("Student with ID " + idToDelete + " deleted.");
                            break;
                        }
                    }

                    if (!studentFound) {
                        System.out.println("Student with ID " + idToDelete + " not found.");
                    }
                    break;

                case 3:
                    System.out.println("Student Details (Descending Order of Average Marks):");
                    for (int i = 0; i < studentCount; i++) {
                        System.out.println("Student ID: " + students[i].stud_id);
                        System.out.println("Name: " + students[i].name);
                        System.out.println("Average Marks: " + students[i].avg_marks);
                        System.out.println();
                    }
                    break;

                case 4:
                    System.out.println("Exiting the program.");
                    sc.close();
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
    }
}












Vector question to add new shopping items in vector and do some functions given below (Question from 2021)

import java.util.*;

class ShoppingItem {
    int itemNo;
    String itemName;
    double itemPrice;

    public ShoppingItem(int itemNo, String itemName, double itemPrice) 
    {
        this.itemNo = itemNo;
        this.itemName = itemName;
        this.itemPrice = itemPrice;
    }
}

public class ShoppingList {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        Vector<ShoppingItem> shoppingVector = new Vector<>(5);

        while (true) {
            System.out.println("Enter a choice:");
            System.out.println("1. Add Item");
            System.out.println("2. Remove Item");
            System.out.println("3. Insert Item at Specific Index");
            System.out.println("4. Convert Vector to Array and Display");
            System.out.println("5. Display Vector using Iterator/Enumeration");
            System.out.println("6. Exit");
            System.out.print("Enter your choice: ");

            int choice = sc.nextInt();
            sc.nextLine(); 

            switch (choice) 
            {
                case 1:
                    if (shoppingVector.size() < 5) 
                    {
                        System.out.print("Enter Item Number: ");
                        int itemNo = sc.nextInt();
                        sc.nextLine(); // Consume newline
                        System.out.print("Enter Item Name: ");
                        String itemName = sc.nextLine();
                        System.out.print("Enter Item Price: ");
                        double itemPrice = sc.nextDouble();

                        ShoppingItem newItem = new ShoppingItem(itemNo, itemName, itemPrice);
                        shoppingVector.add(newItem);
                        System.out.println("Item added successfully.");
                    } 
                    else 
                    {
                        System.out.println("Maximum item limit reached.");
                    }
                    break;

                case 2:
                    if (!shoppingVector.isEmpty()) 
                    {
                        System.out.print("Enter Item Number to remove: ");
                        int itemNoToRemove = sc.nextInt();
                        boolean itemRemoved = false;

                        for (int i = 0; i < shoppingVector.size(); i++) {
                            if (shoppingVector.get(i).itemNo == itemNoToRemove) 
                            {
                                shoppingVector.remove(i);
                                itemRemoved = true;
                                System.out.println("Item with Item Number " + itemNoToRemove + " removed.");
                                break;
                            }
                        }

                        if (!itemRemoved) {
                            System.out.println("Item with Item Number " + itemNoToRemove + " not found.");
                        }
                    } else {
                        System.out.println("Shopping list is empty.");
                    }
                    break;

                case 3:
                    System.out.print("Enter Index to insert the item: ");
                    int insertIndex = sc.nextInt();
                    if (insertIndex >= 0 && insertIndex <= shoppingVector.size()) 
                    {
                        System.out.print("Enter Item Number: ");
                        int itemNo = sc.nextInt();
                        sc.nextLine(); // Consume newline
                        System.out.print("Enter Item Name: ");
                        String itemName = sc.nextLine();
                        System.out.print("Enter Item Price: ");
                        double itemPrice = sc.nextDouble();

                        ShoppingItem newItem = new ShoppingItem(itemNo, itemName, itemPrice);
                        shoppingVector.insertElementAt(newItem, insertIndex);
                        System.out.println("Item inserted at index " + insertIndex + " successfully.");
                    } 
                    else 
                    {
                        System.out.println("Invalid index. Please enter a valid index.");
                    }
                    break;

                case 4:
                    ShoppingItem[] shoppingArray = new ShoppingItem[shoppingVector.size()];
                    shoppingVector.copyInto(shoppingArray);

                    System.out.println("Items in the array:");
                    for (ShoppingItem item : shoppingArray) {
                        System.out.println("Item Number: " + item.itemNo);
                        System.out.println("Item Name: " + item.itemName);
                        System.out.println("Item Price: " + item.itemPrice);
                        System.out.println();
                    }
                    break;

                case 5:
                    System.out.println("Items in the vector using Iterator/Enumeration:");
                    Enumeration<ShoppingItem> enumeration = shoppingVector.elements();
                    while (enumeration.hasMoreElements()) {
                        ShoppingItem item = enumeration.nextElement();
                        System.out.println("Item Number: " + item.itemNo);
                        System.out.println("Item Name: " + item.itemName);
                        System.out.println("Item Price: " + item.itemPrice);
                        System.out.println();
                    }
                    break;

                case 6:
                    System.out.println("Exiting the program.");
                    sc.close();
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
                    break;
            }
        }
    }
}



import java.util.Scanner;

class Customer 
{
    int account_id;
    String name;
    double balance;

    public Customer(int account_id, String name, double balance) 
    {
        this.account_id = account_id;
        this.name = name;
        this.balance = balance;
    }
}









Q. Write a Program inserting name, id, and salary in array of objects and display their input in descending format




public class CustomerAccountManagement 
{
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = 10; // Maximum number of customers
        Customer[] customers = new Customer[n];
        int count = 0; // Current number of customers in the array

        while (true) {
            System.out.println("Menu:");
            System.out.println("1. Add Account");
            System.out.println("2. Delete Account");
            System.out.println("3. Display Account Details");
            System.out.println("4. Exit");
            System.out.print("Enter your choice: ");

            int choice = scanner.nextInt();

            switch (choice) 
            {
                case 1:
                    if (count < n) 
                    {
                        System.out.print("Enter Account ID: ");
                        int account_id = scanner.nextInt();
                        System.out.print("Enter Customer Name: ");
                        scanner.nextLine(); // Consume the newline character
                        String name = scanner.nextLine();
                        System.out.print("Enter Initial Balance: ");
                        double balance = scanner.nextDouble();

                        customers[count] = new Customer(account_id, name, balance);
                        count++;
                    } 
                    else 
                    {
                        System.out.println("Cannot add more accounts. Array is full.");
                    }
                    break;

                case 2:
                    System.out.print("Enter Account ID to delete: ");
                    int idToDelete = scanner.nextInt();
                    boolean found = false;

                    for (int i = 0; i < count; i++) 
                    {
                        if (customers[i].account_id == idToDelete) 
                        {
                            // Shift elements to fill the gap
                            for (int j = i; j < count - 1; j++) 
                            {
                                customers[j] = customers[j + 1];
                            }
                            count--;
                            found = true;
                            System.out.println("Account with ID " + idToDelete + " deleted.");
                            break;
                        }
                    }

                    if (!found) {
                        System.out.println("Account with ID " + idToDelete + " not found.");
                    }
                    break;

                case 3:
                    System.out.println("Account Details:");
                    for (int i = 0; i < count; i++) 
                    {
                        System.out.println("Account ID: " + customers[i].account_id);
                        System.out.println("Name: " + customers[i].name);
                        System.out.println("Balance: " + customers[i].balance);
                        System.out.println();
                    }
                    break;

                case 4:
                    System.out.println("Exiting the program.");
                    scanner.close();
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid choice. Please try again.");
            }
        }
    }
}



Q. Luhn's Algorithm, Question from 2022-ISE


import java.util.*;

public class Luhn
{
    public static void main(String args[])
    {
        Scanner sc=new Scanner(System.in);
        long number;
        System.out.println("Enter the Credit Card number");
        number=sc.nextLong();
       
        long copy1=number;
        long copy2=number;
        int count=0;
        int correct=1;
        while(copy1!=0)
        {
            copy1=copy1/10;
            count++;
        }
        if(count!=16)
        {
            System.out.println("Enter a valid number");
        }
        else
        {
            System.out.println("The Entered number is "+number);
            int count1=16;

           outer: while(count1!=0)
            {
                if(count1%2==0)
                {
                    copy2=copy2/10;
                    count1--;
                    
                }
                else
                {
                    long add=0;
                    long num=(copy2%10)*2;
                    long num2=num;
                    if(num!=0)
                    {
                         add=(num2%10+num2/10);
                    }

                    
                    if(add==(num2-9) || add==num2 || add==0)
                    {
                        count1--;
                        copy2=copy2/10;
                    }
                    else
                    {
                        correct=0;
                        break outer;
                    }
                    
                }
            }
            if(correct==0)
            {
                System.out.println("Invalid number");
            }
            else
            {
                System.out.println("Valid Number");
            }


            


        }

    }
}







